---
# setup-environment-user-only.yml - ansible playbook to bootstrap a user environment
# without requiring root/sudo access on the target host

- name: bootstrap user environment (no root required)
  hosts: all
  vars:
    # hardcoded go version instead of dynamically fetching it
    go_version: "go1.24.3"
    go_os: "{{ ansible_system | lower }}"
    go_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else ('arm64' if ansible_architecture == 'aarch64' else ('386' if ansible_architecture in ['i386', 'i686'] else ansible_architecture)) }}"
    python2_ver: "2.7.18"
    python3_ver: "3.12.7"
    home_dir: "{{ ansible_env.HOME }}"
    nvim_version: "0.11.4"
    install_lsps: false  # default to not installing LSPs
    dotfiles_map:
      - { src: "Xdefaults", dest: ".Xdefaults" }
      - { src: "ansible.cfg", dest: ".ansible.cfg" }
      - { src: "cloginrc", dest: ".cloginrc" }
      - { src: "digrc", dest: ".digrc" }
      - { src: "flake8", dest: ".flake8" }
      - { src: "git/gitconfig", dest: ".gitconfig" }
      - { src: "git/gitconfig-personal", dest: ".gitconfig-personal" }
      - { src: "git/gitignore", dest: ".gitignore" }
      - { src: "mailcap", dest: ".mailcap" }
      - { src: "markdownlint.json", dest: ".markdownlintrc" }
      - { src: "octaverc", dest: ".octaverc" }
      - { src: "ruff.toml", dest: ".ruff.toml" }
      - { src: "screenrc", dest: ".screenrc" }
      - { src: "sqliterc", dest: ".sqliterc" }
      - { src: "templates", dest: ".templates" }
      - { src: "tmux.conf", dest: ".tmux.conf" }
      - { src: "urlview", dest: ".urlview" }
      - { src: "vale.ini", dest: ".vale.ini" }
      - { src: "zshrc", dest: ".zshrc" }
      - { src: "zsh/zlogin", dest: ".zlogin" }
      - { src: "zsh/zshenv", dest: ".zshenv" }
      - { src: "ssh/config", dest: ".ssh/config" }
    pub_keys:
      - { name: "nh", url: "https://github.com/sulrich-nexthop.keys" }
      - { name: "github", url: "https://github.com/sulrich.keys" }
      - { name: "botwerks", url: "https://botwerks.net/sulrich.keys" }
    git_repos:
      - { repo: "https://github.com/sulrich/xdg-config-home.git", dest: "{{ home_dir }}/.config", ssh_url: "github-sulrich:/sulrich/xdg-config-home.git" }
      - { repo: "https://github.com/sulrich/nvim.git", dest: "{{ home_dir }}/.config/nvim", ssh_url: "github-sulrich:/sulrich/nvim.git" }
      - { repo: "https://github.com/sulrich/home-bin.git", dest: "{{ home_dir }}/bin", ssh_url: "github-sulrich:/sulrich/home-bin.git" }
      - { repo: "https://github.com/tmux-plugins/tpm", dest: "{{ home_dir }}/.tmux/plugins/tpm", ssh_url: "github-sulrich:/tmux-plugins/tpm" }
  tasks:
    - name: detect os family
      set_fact:
        is_debian: "{{ ansible_os_family == 'Debian' }}"
        is_redhat: "{{ ansible_os_family == 'RedHat' }}"
        is_macos: "{{ ansible_os_family == 'Darwin' }}"

    - name: create basic directories
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - "{{ home_dir }}/.ssh"
        - "{{ home_dir }}/.ssh/tmp"
        - "{{ home_dir }}/.credentials"

        - "{{ home_dir }}/.local/share"
        - "{{ home_dir }}/.local/bin"
        - "{{ home_dir }}/.config"
        - "{{ home_dir }}/go/bin"
        - "{{ home_dir }}/go/src"
        - "{{ home_dir }}/go/pkg"
        - "{{ home_dir }}/src/personal"

    # secure the credentials directory
    - name: set permissions on credentials directory
      file:
        path: "{{ home_dir }}/.credentials"
        mode: 0700

    - name: check if dotfiles repository exists
      stat:
        path: "{{ home_dir }}/src/personal/dotfiles/.git"
      register: dotfiles_stat

    # adjust this to your actual dotfiles repo URL
    - name: clone dotfiles repository if not exists
      git:
        repo: "https://github.com/sulrich/dotfiles.git"
        dest: "{{ home_dir }}/src/personal/dotfiles"
        clone: yes
      register: dotfiles_clone
      when: not dotfiles_stat.stat.exists

    # Skip pull for existing dotfiles repository - just check presence
    - name: register dotfiles repository exists
      set_fact:
        dotfiles_exists: true
      when: dotfiles_stat.stat.exists

    - name: update dotfiles repository remote URL for new clone only
      shell: |
        cd {{ home_dir }}/src/personal/dotfiles
        git remote set-url origin github-sulrich:/sulrich/dotfiles.git
      when: dotfiles_clone is defined and dotfiles_clone.changed

    - name: create .home symlink to dotfiles
      file:
        src: "{{ home_dir }}/src/personal/dotfiles"
        dest: "{{ home_dir }}/.home"
        state: link

    - name: check if git repos exist
      stat:
        path: "{{ item.dest }}/.git"
      loop: "{{ git_repos }}"
      register: git_repos_stat

    - name: clone git repos if not exist
      git:
        repo: "{{ item.item.repo }}"
        dest: "{{ item.item.dest }}"
        clone: yes
      loop: "{{ git_repos_stat.results }}"
      when: not item.stat.exists
      register: git_clone_results
      loop_control:
        label: "{{ item.item.dest }}"

    # Skip pull for existing git repos - just check presence
    - name: register git repos exist
      debug:
        msg: "Repository exists at {{ item.item.dest }}"
      loop: "{{ git_repos_stat.results }}"
      when: item.stat.exists
      loop_control:
        label: "{{ item.item.dest }}"

    # Skip git remote updates entirely
    # This avoids any SSH agent dependency for subsequent runs
    - name: check for newly cloned git repos
      set_fact:
        any_repos_cloned: "{{ git_clone_results.results | default([]) | selectattr('changed', 'defined') | selectattr('changed') | list | length > 0 }}"
      when: git_clone_results is defined

    - name: update git remote URLs for newly cloned repos only
      shell: |
        cd {{ item.item.dest }}
        git remote set-url origin {{ item.item.ssh_url }}
      loop: "{{ git_clone_results.results | default([]) }}"
      when:
        - git_clone_results is defined
        - item.changed | default(false)
      loop_control:
        label: "{{ item.item.dest | default('unknown') }}"

    - name: check if fzf exists
      stat:
        path: "{{ home_dir }}/.fzf/.git"
      register: fzf_stat

    - name: install fzf if not exists
      git:
        repo: https://github.com/junegunn/fzf.git
        dest: "{{ home_dir }}/.fzf"
        depth: 1
      register: fzf_clone
      when: not fzf_stat.stat.exists

    # Skip pull for existing fzf - just check presence
    - name: register fzf exists
      set_fact:
        fzf_exists: true
      when: fzf_stat.stat.exists

    - name: install fzf binaries
      shell: "{{ home_dir }}/.fzf/install --all"
      when: fzf_clone is defined and fzf_clone.changed

    - name: create ssh symlink for platform
      file:
        src: "{{ home_dir }}/.home/ssh/{{ ansible_system | lower }}"
        dest: "{{ home_dir }}/.ssh/conf.d"
        state: link

    - name: set ssh directory permissions
      file:
        path: "{{ home_dir }}/.home/ssh"
        mode: 0755
        recurse: yes

    - name: check for existing zshrc file
      stat:
        path: "{{ home_dir }}/.zshrc"
      register: zshrc_file

    - name: backup existing zshrc file if it exists
      copy:
        src: "{{ home_dir }}/.zshrc"
        dest: "{{ home_dir }}/.zshrc.bak"
        remote_src: yes
      when: zshrc_file.stat.exists and zshrc_file.stat.islnk == false

    - name: remove existing zshrc file
      file:
        path: "{{ home_dir }}/.zshrc"
        state: absent
      when: zshrc_file.stat.exists and zshrc_file.stat.islnk == false

    - name: create dotfile symlinks
      file:
        src: "{{ home_dir }}/.home/{{ item.src }}"
        dest: "{{ home_dir }}/{{ item.dest }}"
        state: link
      loop: "{{ dotfiles_map }}"

    - name: check if go is already installed locally
      stat:
        path: "{{ home_dir }}/.local/go/bin/go"
      register: go_binary

    - name: install go to user local directory
      block:
        - name: download go
          get_url:
            url: "https://dl.google.com/go/{{ go_version }}.{{ go_os }}-{{ go_arch }}.tar.gz"
            dest: "/tmp/{{ go_version }}.{{ go_os }}-{{ go_arch }}.tar.gz"

        - name: create local go directory
          file:
            path: "{{ home_dir }}/.local/go"
            state: directory
            mode: 0755

        - name: extract go
          unarchive:
            src: "/tmp/{{ go_version }}.{{ go_os }}-{{ go_arch }}.tar.gz"
            dest: "{{ home_dir }}/.local"
            remote_src: yes

        - name: cleanup go tarball
          file:
            path: "/tmp/{{ go_version }}.{{ go_os }}-{{ go_arch }}.tar.gz"
            state: absent
      when: not go_binary.stat.exists

    - name: sync public ssh keys
      block:
        - name: download public keys
          get_url:
            url: "{{ item.url }}"
            dest: "/tmp/{{ item.name }}.keys"
          loop: "{{ pub_keys }}"

        - name: concat keys to authorized_keys
          shell: cat /tmp/{{ item.name }}.keys >> {{ home_dir }}/.ssh/authorized_keys
          loop: "{{ pub_keys }}"

        - name: remove duplicate keys
          shell: sort -u {{ home_dir }}/.ssh/authorized_keys > /tmp/auth_keys_uniq && mv /tmp/auth_keys_uniq {{ home_dir }}/.ssh/authorized_keys

        - name: set authorized_keys permissions
          file:
            path: "{{ home_dir }}/.ssh/authorized_keys"
            mode: 0755

        - name: cleanup temp key files
          file:
            path: "/tmp/{{ item.name }}.keys"
            state: absent
          loop: "{{ pub_keys }}"

    - name: copy specific ssh public keys from controller
      copy:
        src: "{{ lookup('env', 'HOME') }}/.ssh/{{ item }}"
        dest: "{{ home_dir }}/.ssh/{{ item }}"
        mode: 0600
      loop:
        - "sulrich-botwerks.pub"
        - "sulrich-nexthop.pub"
        # - "sulrich-blink.pub"

    - name: check if uv is installed
      stat:
        path: "{{ home_dir }}/.local/bin/uv"
      register: uv_binary

    - name: install uv python package manager
      shell: curl -LsSf https://astral.sh/uv/install.sh | sh
      args:
        creates: "{{ home_dir }}/.local/bin/uv"
      when: not uv_binary.stat.exists

    - name: check if python3 is installed via uv
      stat:
        path: "{{ home_dir }}/.uv/pythons/{{ python3_ver }}"
      register: uv_python3

    - name: install python3 using uv
      shell: |
        {{ home_dir }}/.local/bin/uv python install {{ python3_ver }}
      args:
        executable: /bin/bash
        creates: "{{ home_dir }}/.uv/pythons/{{ python3_ver }}"
      when: not uv_python3.stat.exists

    - name: check if ruff is installed
      stat:
        path: "{{ home_dir }}/.local/bin/ruff"
      register: ruff_binary

    - name: install ruff using uv
      shell: |
        {{ home_dir }}/.local/bin/uv tool install ruff
      args:
        executable: /bin/bash
        creates: "{{ home_dir }}/.local/bin/ruff"
      when: not ruff_binary.stat.exists

    - name: check if basedpyright is installed
      stat:
        path: "{{ home_dir }}/.local/bin/basedpyright"
      register: basedpyright_binary

    - name: install basedpyright using uv
      shell: |
        {{ home_dir }}/.local/bin/uv tool install basedpyright
      args:
        executable: /bin/bash
        creates: "{{ home_dir }}/.local/bin/basedpyright"
      when: not pyright_binary.stat.exists

    - name: check if 1password cli is installed
      stat:
        path: "{{ home_dir }}/.local/bin/op"
      register: op_binary

    - name: set 1password cli architecture
      set_fact:
        op_arch: >-
          {{ 'amd64' if ansible_architecture == 'x86_64'
             else 'arm64' if ansible_architecture == 'aarch64'
             else '386' if ansible_architecture in ['i386', 'i686']
             else ansible_architecture }}

    - name: install 1password cli
      block:
        - name: download 1password cli
          get_url:
            url: "https://cache.agilebits.com/dist/1P/op2/pkg/v{{ op_latest_version | default('2.30.0') }}/op_linux_{{ op_arch }}_v{{ op_latest_version | default('2.30.0') }}.zip"
            dest: "/tmp/op_linux_{{ op_arch }}.zip"
            mode: 0644

        - name: extract 1password cli
          unarchive:
            src: "/tmp/op_linux_{{ op_arch }}.zip"
            dest: "{{ home_dir }}/.local/bin"
            remote_src: yes
            creates: "{{ home_dir }}/.local/bin/op"
            mode: 0755

        - name: cleanup 1password cli zip
          file:
            path: "/tmp/op_linux_{{ op_arch }}.zip"
            state: absent
      when: not op_binary.stat.exists

    - name: check if github cli is installed
      stat:
        path: "{{ home_dir }}/.local/bin/gh"
      register: gh_binary

    - name: get latest github cli version
      shell: |
        curl -s https://api.github.com/repos/cli/cli/releases/latest | grep '"tag_name":' | cut -d '"' -f 4 | sed 's/^v//'
      register: gh_latest_version_result
      changed_when: false
      when: not gh_binary.stat.exists

    - name: set github cli version fact
      set_fact:
        gh_latest_version: "{{ gh_latest_version_result.stdout }}"
      when: not gh_binary.stat.exists

    - name: set github cli architecture
      set_fact:
        gh_arch: >-
          {{ 'amd64' if ansible_architecture == 'x86_64'
             else 'arm64' if ansible_architecture == 'aarch64'
             else '386' if ansible_architecture in ['i386', 'i686']
             else ansible_architecture }}
      when: not gh_binary.stat.exists

    - name: install github cli
      block:
        - name: download github cli
          get_url:
            url: "https://github.com/cli/cli/releases/download/v{{ gh_latest_version }}/gh_{{ gh_latest_version }}_linux_{{ gh_arch }}.tar.gz"
            dest: "/tmp/gh_linux_{{ gh_arch }}.tar.gz"
            mode: 0644

        - name: create temp extraction directory
          file:
            path: "/tmp/gh_extract"
            state: directory
            mode: 0755

        - name: extract github cli
          unarchive:
            src: "/tmp/gh_linux_{{ gh_arch }}.tar.gz"
            dest: "/tmp/gh_extract"
            remote_src: yes

        - name: copy gh binary to local bin
          copy:
            src: "/tmp/gh_extract/gh_{{ gh_latest_version }}_linux_{{ gh_arch }}/bin/gh"
            dest: "{{ home_dir }}/.local/bin/gh"
            mode: 0755
            remote_src: yes

        - name: cleanup github cli files
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/tmp/gh_linux_{{ gh_arch }}.tar.gz"
            - "/tmp/gh_extract"
      when: not gh_binary.stat.exists

    - name: check if neovim exists
      stat:
        path: "{{ home_dir }}/.local/bin/nvim"
      register: nvim_binary

    - name: set architecture for neovim appimage
      set_fact:
        nvim_arch: >-
          {{ 'x86_64' if ansible_architecture == 'x86_64'
             else 'arm64' if ansible_architecture == 'aarch64'
             else ansible_architecture }}
      when: not nvim_binary.stat.exists and ansible_system == 'Linux'

    - name: install neovim appimage
      block:
        - name: download neovim appimage directly to local bin
          get_url:
            url: "https://github.com/neovim/neovim/releases/download/v{{ nvim_version }}/nvim-linux-{{ nvim_arch }}.appimage"
            dest: "{{ home_dir }}/.local/bin/nvim.appimage"
            mode: 0755

        - name: create symbolic link for nvim
          file:
            src: "{{ home_dir }}/.local/bin/nvim.appimage"
            dest: "{{ home_dir }}/.local/bin/nvim"
            state: link
      when: not nvim_binary.stat.exists and ansible_system == 'Linux'

    - name: check if neovim python venv exists
      stat:
        path: "{{ home_dir }}/.config/nvim/.venv"
      register: nvim_venv

    - name: set up neovim python environment with uv
      block:
        - name: create neovim python venv
          shell: |
            cd {{ home_dir }}/.config/nvim
            {{ home_dir }}/.local/bin/uv venv
          args:
            creates: "{{ home_dir }}/.config/nvim/.venv"

        - name: install neovim python dependencies
          shell: |
            cd {{ home_dir }}/.config/nvim
            source .venv/bin/activate
            {{ home_dir }}/.local/bin/uv pip install neovim pynvim
            {{ home_dir }}/.local/bin/uv pip install ruff basedpyright
          args:
            executable: /bin/bash
        when: not nvim_venv.stat.exists

    - name: check if gopls is installed
      shell: |
        export PATH="{{ home_dir }}/.local/go/bin:$PATH:{{ home_dir }}/go/bin"
        which gopls
      args:
        executable: /bin/bash
      register: gopls_check
      ignore_errors: yes
      changed_when: false
      failed_when: false
      when: install_lsps | bool

    - name: install gopls
      shell: |
        export PATH="{{ home_dir }}/.local/go/bin:$PATH"
        {{ home_dir }}/.local/go/bin/go install golang.org/x/tools/gopls@latest
      args:
        executable: /bin/bash
      when:
        - install_lsps | bool
        - gopls_check.rc != 0
      ignore_errors: yes
      changed_when: false

    - name: display LSP installation message
      debug:
        msg: "LSP tools (gopls) have been installed"
      when: install_lsps | bool

    - name: display setup completion message
      debug:
        msg: |
          user-only setup complete!
          remember to:
          1. start tmux and press "c-t + i" to install tmux plugins
          2. copy any needed credentials to ~/.credentials
          3. a neovim python environment has been set up with pynvim, ruff, and basedpyright installed
