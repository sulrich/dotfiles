# -*- Mode: shell-script; tab-width: 2 -*- *
# 

# this should prevent me from sourcing the /etc/z* files
unsetopt GLOBAL_RCS

export HOSTNAME=$(hostname)
export PLATFORM=$(uname)
# pull in platform specific environment variables, etc.  
if [ -e "${HOME}/.home/zsh-custom/platform/${PLATFORM}-env.zsh" ]
then
  source "${HOME}/.home/zsh-custom/platform/${PLATFORM}-env.zsh"
fi

# pull in host specific environment variables, etc.
if [ -e  "${HOME}/.home/zsh-custom/hosts/${HOSTNAME}-env.zsh" ]
then
  source "${HOME}/.home/zsh-custom/hosts/${HOSTNAME}-env.zsh"
fi

#---------------------------------------------------------------------
# ansible vars
export ANSIBLE_INVENTORY=${HOME}/src/ansible/etc/hosts

#---------------------------------------------------------------------
# generic environment variables
#

export SSH_KEY_PATH="${HOME}/.ssh/id_rsa"   # i'm tired of fucking with this
export TTY 
export PAGER="less"
export LYNX_CFG="${HOME}/.home/lynx.cfg"
export CVS_RSH=ssh
export CLICOLOR=1
export GOPATH=${HOME}/go
# export LESS="$LESS -i -x2" # do we still need this zhsrc-custom?
# added the eFRX to pass through escape characters in git diff mode
export LESS="$LESS -eFRX -i -x2"
export GPG_TTY=$(tty)

# makes gnuplot happy, assumes that gnuplot was built w/qt support, otherwise
# set this to X11
export GNUTERM=x11

# localization info
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8 

if (( ${+SSH_CONNECTION} )); 
then
  # we're remote
  export EDITOR=vim
else
  export EDITOR=vim
fi
export VISUAL=${EDITOR} 

# misc. perl specific variables.
# use PERLBREW for locally installed perl
# make sure the specify the preferred perlbrew for the installation we're running on
# e.g.: perlbrew list ... pick one
#       perlbrew use <perl_ver_here>
export PERLDOC_PAGER="less -isrR"
export PERL5LIB="${HOME}/src/perl/libs"
export PERLBREW_HOME="${HOME}/.perlbrew"

# pyang specific variables, etc.
export YANG_MODPATH=${HOME}/src/yang/standard:${HOME}/src/openconfig/public/release
export YANG_PLUGINS="${HOME}/.pyang"

function setpath () {

  LOCAL_PATH="/usr/local/bin:/usr/local/sbin:${GOPATH}/bin"
  POETRY_DIR="${HOME}/.poetry/bin"

  # handle cases where we need to shim the go binaries into the path due to a
  # non-default installation of golang
  if [[ -d "/usr/local/go/bin" ]];
  then
    LOCAL_PATH="/usr/local/go/bin:${LOCAL_PATH}"
  fi

  # inject poetry into the path as appropriate
  if [[ -d "${POETRY_DIR}" ]];
  then
    POETRY_PATH="${POETRY_DIR}:"
  else
    POETRY_PATH=""
  fi

  # we should be running pyenv for all our python needs interactively
  if (( ${+PYENV_ROOT} )); 
  then
    PYENV_PATH="${PYENV_ROOT}/bin:"
  else
    PYENV_PATH=""
  fi

  # misc. conda stuff
  #
  # 20210321 (sulrich) for now, i'll stick my conda stuff in
  # ${HOME}/src/anacondaX reference the following stack-exchange article re:
  # managing pyenv and conda environments.
  #
  # https://stackoverflow.com/questions/58044214/installing-anaconda-with-pyenv-unable-to-configure-virtual-environment/58045893
  #
  # of note is the guidance to manage these separately and to disable the base
  # environment by default.
  if [ -f "${HOME}/src/anaconda3/etc/profile.d/conda.sh" ]; then
    . "${HOME}/src/anaconda3/etc/profile.d/conda.sh"
  else
    if [[ -d "${HOME}/src/anaconda3/bin" ]]; then
      CONDA_PATH="${HOME}/src/anaconda3/bin"
    else
      CONDA_PATH=""
    fi
  fi  

  
  # set path to address OS/arch  specific binaries within home directory
  # OSPATH=`uname -ms | sed 's| |/|g'`

  export PATH="${PYENV_PATH}${POETRY_PATH}${CONDA_PATH}${LOCAL_PATH}:${HOME}/bin:${PATH}:."
  export MANPATH="/usr/local/man:/usr/man:/usr/share/man:"
  export MANPATH="${MANPATH}:/usr/X11R6/man:/usr/local/man:${HOME}/Library/man:."
  export INFOPATH="/usr/local/share/info:${INFOPATH}"

  # snmptools needs to pick this up
  export MIBDIRS="${HOME}/.snmp/mibs/cisco:${HOME}/.snmp/mibs/juniper"
  export MIBDIRS="${MIBDIRS}:${HOME}/.snmp/mibs/std:${HOME}/.snmp/mibs/misc:."
}



# for perlbrew
if [[ -f "${HOME}/src/perl/etc/bashrc" && -z "${INSIDE_EMACS}" ]];
then
  source "${HOME}/src/perl/etc/bashrc"
fi

# pull in the gcloud sdk tools
if [ -f "${HOME}/src/google-cloud-sdk/path.zsh.inc" ]
then
  source "${HOME}/src/google-cloud-sdk/path.zsh.inc"
fi 


# load rvm into a shell session *as a function*
if [ -e "${HOME}/.rvm/scripts/rvm" ];
then
  source "${HOME}/.rvm/scripts/rvm"
fi

# include credentials which are embedded in environment variables.  this
# should not be included in git repos
if [ -f "${HOME}/.credentials/00-api-creds.env" ];
then
  source "${HOME}/.credentials/00-api-creds.env"
fi

# actually set the path per the constructed elements above
setpath

# update pyenv stuff accordingly
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

if which pyenv-virtualenv-init > /dev/null; then 
  eval "$(pyenv virtualenv-init -)"; 
fi


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/Users/sulrich/src/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "${HOME}/src/anaconda3/etc/profile.d/conda.sh" ]; then
#         . "${HOME}/src/anaconda3/etc/profile.d/conda.sh"
#     else
#         export PATH="/Users/sulrich/src/anaconda3/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# # <<< conda initialize <<<

