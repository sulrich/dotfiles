# -*- Mode: shell-script; tab-width: 2 -*- *

# this should prevent me from sourcing the /etc/z* files
unsetopt GLOBAL_RCS

# shell specific vars
export DIRSTACKSIZE=20
export HISTSIZE=100

export HOSTNAME=$(hostname)
export PLATFORM=$(uname)

#---------------------------------------------------------------------
# ansible vars
export ANSIBLE_INVENTORY=${HOME}/src/ansible/etc/hosts

#---------------------------------------------------------------------
# generic environment variables
#
export PYTHON2_VER="2.7.18"
export PYTHON3_MAJOR="python3.11"
export PYTHON3_VER="3.11.1"
export PYENV_ROOT="${HOME}/.pyenv"
# i have mixed feelings about the following.  if i were in a consistent
# development mode of operation would probably need to enable this.
# set to true in a pristine environment.  documenting this for future me.
export PIP_REQUIRE_VIRTUALENV=false
export SSH_KEY_PATH="${HOME}/.ssh/id_rsa"   # i'm tired of fucking with this
export TTY 
export PAGER="less"
export LYNX_CFG="${HOME}/.home/lynx.cfg"
export CVS_RSH=ssh
export CLICOLOR=1
export GOPATH=${HOME}/go
# export LESS="$LESS -i -x2" # do we still need this zhsrc-custom?
# added the eFRX to pass through escape characters in git diff mode
export LESS="$LESS -eFRX -i -x2"
export GPG_TTY=$(tty)
export OC_PATH_DUMP="${HOME}/.home/openconfig/oc-path-list.txt"
export CLAB_DIR="${HOME}/clab"

# 20220331 TODO(sulrich): check back on this in 30days seems to impact gnmic,
# containerlab and more
export ASSUME_NO_MOVING_GC_UNSAFE_RISK_IT_WITH=go1.19

# localization info
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8 

# just set this to vim everywhere and set the alias to nvim as appropriate for
# our environment.
export EDITOR=vim
export VISUAL=${EDITOR} 

# env fixups if remote
# if (( ${+SSH_CONNECTION} )); 
# then
#   echo ""
# else
#   echo ""
# fi

# misc. perl specific variables.
# use PERLBREW for locally installed perl make sure the specify the preferred
# perlbrew for the installation we're running on e.g.: perlbrew list, pick 1
# perlbrew use <perl_ver_here>
# export PERLDOC_PAGER="less -isrR"
# export PERL5LIB="${HOME}/src/perl/libs"
# export PERLBREW_HOME="${HOME}/.perlbrew"

# pyang specific variables, etc.
export YANG_MODPATH=${HOME}/src/yang/standard:${HOME}/src/openconfig/public/release
export YANG_PLUGINS="${HOME}/.pyang"

setpath() {
  if [[ -d "/opt/homebrew/bin" ]];
  then
    LOCAL_PATH="/opt/homebrew/bin:/opt/homebrew/sbin:"
  fi 
  
  LOCAL_PATH="${LOCAL_PATH}/usr/local/bin:/usr/local/sbin:${GOPATH}/bin:/usr/bin:/usr/sbin:/sbin"
  POETRY_DIR="${HOME}/.poetry/bin"
  CARGO_DIR="${HOME}/.cargo/bin"

  # handle cases where we need to shim the go binaries into the path due to a
  # non-default installation of golang
  if [[ -d "/usr/local/go/bin" ]];
  then
    LOCAL_PATH="/usr/local/go/bin:${LOCAL_PATH}"
  fi

  # inject poetry into the path as appropriate
  if [[ -d "${POETRY_DIR}" ]];
  then
    POETRY_PATH="${POETRY_DIR}:"
  else
    POETRY_PATH=""
  fi

  # inject rust cargo into the path as appropriate
  if [[ -d "${CARGO_DIR}" ]];
  then
    CARGO_PATH="${CARGO_DIR}:"
  else
    CARGO_PATH=""
  fi

  # we should be running pyenv for all our python needs interactively
  # check for the presence of PYENV_ROOT
  if (( ${+PYENV_ROOT} )); 
  then
    PYENV_PATH="${PYENV_ROOT}/bin:"
  else
    PYENV_PATH=""
  fi

  # misc. conda stuff
  #
  # 20210321 (sulrich) for now, i'll stick my conda stuff in
  # ${HOME}/src/anacondaX reference the following stack-exchange article re:
  # managing pyenv and conda environments.
  #
  # https://stackoverflow.com/questions/58044214/installing-anaconda-with-pyenv-unable-to-configure-virtual-environment/58045893
  #
  # of note is the guidance to manage these separately and to disable the base
  # environment by default.
  # if [ -f "${HOME}/src/anaconda3/etc/profile.d/conda.sh" ]; then
  #   # note that the following bumps the conda elements into the path
  #   . "${HOME}/src/anaconda3/etc/profile.d/conda.sh"
  # else
  #   if [[ -d "${HOME}/src/anaconda3/bin" ]]; then
  #     CONDA_PATH="${HOME}/src/anaconda3/bin:"
  #   else
  #     CONDA_PATH=""
  #   fi
  # fi  

  # set path to address OS/arch  specific binaries within home directory
  # OSPATH=`uname -ms | sed 's| |/|g'`
  export PATH="${PYENV_PATH}${POETRY_PATH}${CONDA_PATH}${CARGO_PATH}${LOCAL_PATH}:${HOME}/bin:${PATH}:."
  export MANPATH="/usr/local/man:/usr/man:/usr/share/man:"
  export MANPATH="${MANPATH}:/usr/X11R6/man:/usr/local/man:${HOME}/Library/man:."
  export INFOPATH="/usr/local/share/info:${INFOPATH}"

  # snmptools needs to pick this up
  # note that the default "/usr/share/snmp/mibs" is available across most unixes
  # this includes macos.  the balance of the mibs can be installed from my
  # personal stash.
  export MIBDIRS="/usr/share/snmp/mibs:${HOME}/.snmp/mibs/cisco:${HOME}/.snmp/mibs/juniper"
  export MIBDIRS="${MIBDIRS}:${HOME}/.snmp/mibs/std:${HOME}/.snmp/mibs/misc:."
} # end setpath()


# check to see if we're in tmux
if [[ -z ${TMUX} ]];  # we're not in tmux
then
  # actually set the path per the constructed elements 
  # note that if we're in tmux we'll append the $PATH entries that makes things
  # difficult sometimes.
  setpath

  # pull in platform specific environment variables, etc.  
  if [ -e "${HOME}/.home/zsh-custom/platform/${PLATFORM}-env.zsh" ]
  then
    source "${HOME}/.home/zsh-custom/platform/${PLATFORM}-env.zsh"
  fi

  # pull in host specific environment variables, etc.
  if [ -e  "${HOME}/.home/zsh-custom/hosts/${HOSTNAME}-env.zsh" ]
  then
    source "${HOME}/.home/zsh-custom/hosts/${HOSTNAME}-env.zsh"
  fi

  # perlbrew
  if [[ -f "${HOME}/src/perl/etc/bashrc" && -z "${INSIDE_EMACS}" ]];
  then
    source "${HOME}/src/perl/etc/bashrc"
  fi

  # pull in the gcloud sdk tools
  if [ -f "${HOME}/src/google-cloud-sdk/path.zsh.inc" ]
  then
    source "${HOME}/src/google-cloud-sdk/path.zsh.inc"
  fi 

  # load rvm into a shell session *as a function*
  if [ -e "${HOME}/.rvm/scripts/rvm" ];
  then
    source "${HOME}/.rvm/scripts/rvm"
  fi

  # include credentials which are embedded in environment variables.  this
  # should not be included in git repos
  if [ -f "${HOME}/.credentials/00-api-creds.env" ];
  then
    source "${HOME}/.credentials/00-api-creds.env"
  fi


  # ruby environment setup
  # eval "$(rbenv init - zsh)"

  # update pyenv elements appropriaately
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"  # i honestly don't know if i need this 2nd invocation

  if which pyenv-virtualenv-init > /dev/null; then 
    eval "$(pyenv virtualenv-init -)"; 
  fi

else 
  # we're inside of tmux
fi
