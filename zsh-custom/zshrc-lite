# -*- Mode: shell-script; tab-width: 2 -*- *
#---------------------------------------------------------------------
# setup zsh parameters
#

if [ ! -z "$STARTPWD" ]
then
  cd $STARTPWD
fi

setopt	pushdtohome cdablevars autolist automenu alwayslastprompt \
	autoparamkeys autoremoveslash chaselinks extendedhistory hashcmds \
	hashdirs histignoredups nobeep \
	longlistjobs alwaystoend \
	nobadpattern nonomatch \
	nohistbeep nohup notify path_dirs rm_star_silent \
	histignoredups pushdsilent noclobber \
	autopushd pushdminus rcquotes list_types

unsetopt bgnice correct correctall noflowcontrol markdirs pathdirs \
         recexact mailwarning notify noclobber completeinword ignore_eof \
         autocd cdablevars autoresume extendedglob

DIRSTACKSIZE=20
HISTSIZE=100

#---------------------------------------------------------------------
# aliases
#
setaliases() {
  alias ls='ls -CF'
  alias ll='ls -lh'
  alias rm='rm -f'
  alias vi='vim'
  alias quickhttp="python -m SimpleHTTPServer 4000"
  alias -g L="|less"            #  L after a command to page through the output.
  alias -g TL='| tail -20'
  alias -g NUL="> /dev/null 2>&1"
  alias jspp="python -m json.tool $1"

}

# misc. completions experiments
autoload -U compinit
compinit

# edit command line
autoload edit-command-line
zle -N edit-command-line
bindkey '^Xe' edit-command-line
bindkey -e
bindkey '^];' spell-word
compctl -c type
compctl -g '*(-/) .*(-/)' cd rmdir

# the following should prevent tramp hangs in emacs
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' 
if [[ -n ${INSIDE_EMACS} ]]; then
    # this shell runs inside an emacs *shell*/*term* buffer.
    unsetopt zle
fi

# set the prompt appropriately - note: eterm-color is an emacs thang and some
# escape sequences aren't happy in eshell.
if [[ $(id -u) -eq 0 ]] && [[ $TERM != "eterm-color" ]]
then
  PS1="%m[%C]# "
elif [ $TERM == "eterm-color" ]
then
  PS1='[%C]%% '
else
  PS1='%m[%C]%% '
fi

#---------------------------------------------------------------------
# functions
#

setpath () {
  if [ -d "/opt/local" ]
  then
   OPT_PATH="/opt/local/bin:/opt/local/sbin"
  else
   OPT_PATH=""
  fi

  LOCAL_PATH="/usr/local/bin:/usr/local/sbin:/usr/local/opt/go/libexec/bin"

  # set path to address OS/arch  specific binaries within home directory
  OSPATH=`uname -ms | sed 's| |/|g'`

  export PATH="${OPT_PATH}:${LOCAL_PATH}:${HOME}/bin:${HOME}/bin/${OSPATH}:${PATH}:."
  export MANPATH="/usr/local/man:/usr/man:/usr/share/man:"
  export MANPATH="${MANPATH}:/usr/X11R6/man:/usr/local/man:${HOME}/Library/man:."
}

seq () {
  local lower upper output;
  lower=$1 upper=$2;
  while [ $lower -le $upper ];
  do
    output="$output $lower";
    lower=$[ $lower + 1 ];
  done;
  echo $output
}

seqcol () {
  local lower upper output;
  lower=$1 upper=$2;
  while [ $lower -le $upper ];
  do
    output="$lower";
    echo $output
    lower=$[ $lower + 1 ];
  done;
  echo $output
}

killall () {
 local pid
 pid=$(ps -ax | grep $1 | grep -v grep | awk '{ print $1 }')
 echo -n "killing $1 ( process:  $pid )"
 kill -9 `echo $pid`
}

# misc. handy one liners
#function strip-blank () { cat $1 | awk '$0!~/^$/ {print $0}' }
function strip-blank () { sed '/^[[:space:]]*$/d' < $1 }
function debug() { [ "$DEBUG" ] && echo ">>> $*"; }
function xterm-title () { print -Pn "\e]0;${1}: %\a" }
function mwhois { whois -h `whois "domain $@" | sed '/^.*Whois Server:/!d;s///'` "$@" }
function asnwhois { whois -h whois.cymru.com " -v AS$1" }

# the following are particularly handy for working with qemu overlay images
# images
gen-kvm-overlay () {
  # create the router specific overlay files
  # $1 = qcow image,
  # $2 = router image
  qemu-img create -b $1 -f qcow2 $2
}

gen-qcow-image () {
  # get to the base image
  IMAGE=$(basename "$1")
  IMG_BASE=${IMAGE%%.*}
  # returns the filename sans extension
  qemu-img convert $IMG_BASE.vmdk -O qcow2 $IMG_BASE.qcow2
}

gen-mac-addr () {
  # generate a random mac address
  printf 'DE:CA:FB:AD:%02X:%02X\n' $((RANDOM%256)) $((RANDOM%256))
}

umask 002
setpath
setaliases

if [[ $TERM != "dumb" ]]
then
  # enable iterm zsh integration if it's available
  # exclude dumb terminals so that tramp for emacs, etc. works
  test -e "${HOME}/.iterm2_shell_integration.zsh" && \
    source "${HOME}/.iterm2_shell_integration.zsh"
fi




